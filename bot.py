- üëã Hi, I‚Äôm @imcsxbby

import discord
from discord import app_commands
from discord.ext import commands
import requests
from datetime import datetime, timezone, timedelta

# Jeton du bot Discord et cl√© API Sellpass
DISCORD_BOT_TOKEN = ''
SELLPASS_API_KEY = ''
SHOP_ID = ''  # Remplacez par votre Shop ID r√©el

# Initialisation du bot avec intents pour les commandes slash
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='/', intents=intents)

# Fonction pour traduire les statuts
def translate_status(status_code):
    # Mapping v√©rifi√© et ajust√© pour Sellpass
    status_mapping = {
        0: "üÜï New",
        1: "‚ùå Cancelled",  # V√©rifiez si 1 correspond bien √† ‚ùå Cancelled dans votre API
        2: "‚åõ Expired",
        3: "‚úÖ Completed",  # Assurez-vous que 3 correspond bien √† ‚úÖ Completed
    }
    return status_mapping.get(status_code, "‚åõ Expired")



# Fonction pour formater la date et ajuster le fuseau horaire
def format_date(date_str):
    try:
        date_obj = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        date_obj = date_obj.astimezone(timezone(timedelta(hours=2)))  # Ajustez le fuseau horaire ici
        return date_obj.strftime('%d %b %Y %H:%M')
    except Exception as e:
        print(f"Erreur lors du formatage de la date : {e}")
        return "Non disponible"

class InvoiceView(discord.ui.View):
    def __init__(self, invoices, per_page=10):
        super().__init__()
        self.invoices = sorted(invoices, key=lambda x: x.get('created_at', ''), reverse=True)  # Trier par date d√©croissante
        self.per_page = per_page
        self.page = 0

    def create_embed(self):
        """Cr√©e un embed stylis√© pour afficher les factures."""
        start = self.page * self.per_page
        end = start + self.per_page
        page_invoices = self.invoices[start:end]

        embed = discord.Embed(
            title=f"üìú Factures - Page {self.page + 1}/{(len(self.invoices) - 1) // self.per_page + 1}",
            color=discord.Color.dark_blue(),
            description="üìä Affiche les derni√®res transactions effectu√©es."
        )

        for invoice in page_invoices:
            email = invoice.get('customerInfo', {}).get('customerForShop', {}).get('customer', {}).get('email', 'Non disponible')
            valeur = invoice.get('endPrice', 'Non disponible')
            statut = translate_status(invoice.get('status', 1))  # Valeur par d√©faut ajust√©e √† "Completed" pour les statuts incoh√©rents
            temps = format_date(invoice.get('timeline', [{}])[-1].get('time', 'Non disponible'))
            transaction_id = invoice.get('id', 'Non disponible')
            produit = invoice.get('partInvoices', [{}])[0].get('product', {}).get('title', 'Non disponible')

            embed.add_field(
                name=f"üì¶ {produit}",
                value=(
                    f"üìß **Email :** {email}\n"
                    f"üí∞ **Valeur :** {valeur} EUR\n"
                    f"üìã **Statut :** {statut}\n"
                    f"üïí **Date :** {temps}\n"
                    f"üîë **Transaction ID :** `{transaction_id}`"
                ),
                inline=False
            )

        embed.set_footer(text="Utilisez les boutons ci-dessous pour naviguer entre les pages.")
        return embed

    @discord.ui.button(label='‚¨ÖÔ∏è Pr√©c√©dent', style=discord.ButtonStyle.secondary)
    async def previous_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """G√©rer le bouton de page pr√©c√©dente."""
        if self.page > 0:
            self.page -= 1
            await interaction.response.edit_message(embed=self.create_embed())

    @discord.ui.button(label='Suivant ‚û°Ô∏è', style=discord.ButtonStyle.secondary)
    async def next_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """G√©rer le bouton de page suivante."""
        if self.page < (len(self.invoices) - 1) // self.per_page:
            self.page += 1
            await interaction.response.edit_message(embed=self.create_embed())

class MyBot(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    def fetch_orders(self):
        """R√©cup√®re les factures depuis l'API Sellpass."""
        print("Tentative de r√©cup√©ration des factures depuis l'API Sellpass...")
        url = f"https://dev.sellpass.io/self/{SHOP_ID}/invoices"
        headers = {
            'Authorization': f'Bearer {SELLPASS_API_KEY}',
            'Content-Type': 'application/json'
        }
        try:
            print(f"Envoi d'une requ√™te GET √† {url} avec les en-t√™tes {headers}")
            response = requests.get(url, headers=headers)
            print(f"R√©ponse re√ßue avec le code de statut : {response.status_code}")

            if response.status_code == 200:
                data = response.json()
                invoices = data.get('data', [])
                for invoice in invoices:
                    print(invoice)  # Affiche chaque facture pour voir la structure r√©elle
                print(f"{len(invoices)} factures r√©cup√©r√©es avec succ√®s.")
                return invoices
            else:
                print(f"Erreur lors de la r√©cup√©ration des factures : {response.status_code} - {response.text}")
                return []
        except Exception as e:
            print(f"Une exception s'est produite lors de la r√©cup√©ration des factures : {e}")
            return []

    @app_commands.command(name="orders", description="Affiche toutes les factures depuis Sellpass.")
    @app_commands.checks.has_role(1278857164076748801)  # ID du r√¥le requis pour ex√©cuter la commande
    async def orders(self, interaction: discord.Interaction):
        """Commande slash pour afficher toutes les factures depuis l'API Sellpass."""
        print("Commande slash /orders invoqu√©e.")
        commandes = self.fetch_orders()
        if commandes:
            print("Affichage des factures avec pagination.")
            view = InvoiceView(commandes)
            await interaction.response.send_message(embed=view.create_embed(), view=view)
        else:
            print("Aucune facture trouv√©e, envoi du message appropri√© sur Discord.")
            await interaction.response.send_message("**üö´ Aucune facture trouv√©e.**")

    @orders.error
    async def orders_error(self, interaction: discord.Interaction, error):
        if isinstance(error, app_commands.MissingRole):
            await interaction.response.send_message("üö´ Vous n'avez pas les permissions n√©cessaires pour ex√©cuter cette commande.", ephemeral=True)

async def setup(bot):
    await bot.add_cog(MyBot(bot))

@bot.event
async def on_ready():
    print("Bot pr√™t. Tentative de synchronisation des commandes slash avec Discord.")
    await setup(bot)
    try:
        await bot.tree.sync()
        print("Commandes slash synchronis√©es avec succ√®s.")
    except Exception as e:
        print(f"Erreur lors de la synchronisation des commandes : {e}")

# Lancer le bot
print("D√©marrage du bot...")
bot.run(DISCORD_BOT_TOKEN)
